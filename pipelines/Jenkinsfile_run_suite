pipeline {
    agent any

    environment {
        SELENIUM_GRID_HOST = "http://selenium-hub:4444/status"
    }

    parameters {
        choice(
            name: 'SUITE',
            choices: ['AddToCartRunner', 'LoginRunner', 'RegisterRunner', 'AllTestRunner'],
            description: 'Select the test suite to run'
        )
        choice(
            name: 'BROWSER',
            choices: ['Chrome', 'Edge', 'Firefox'],
            description: 'Select the browser for test execution'
        )
    }

    stages {
        stage('Run Serenity Tests in Docker') {
            steps {
                script {
                    def browser = params.BROWSER.toLowerCase()
                    def suite = params.SUITE
                    def gradleCommand = ''

                    echo "Running Serenity tests for suite: ${suite} on browser: ${params.BROWSER}"

                    if (suite == 'AllTestRunner') {
                        gradleCommand = 'gradle --tests "us.opencart.runners.*Runner" -Denvironment=remote' + params.BROWSER + ' --info'
                    } else {
                        gradleCommand = 'gradle --tests "us.opencart.runners.' + suite + '" -Denvironment=remote' + params.BROWSER + ' --info'
                    }

                    sh """
                        docker-compose -f docker-compose.selenium.yml up -d selenium-hub ${browser}-node
                    """
                    waitForSeleniumGridUp(env.SELENIUM_GRID_HOST, 3, 10)
                    sh """
                        ${gradleCommand}
                        gradle aggregate
                        docker-compose -f docker-compose.selenium.yml down
                    """
                }
            }
        }

        stage('Store Serenity Reports') {
            steps {
                script {
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: './target/site/serenity',
                        reportFiles: 'index.html',
                        reportName: "${params.SUITE}-Serenity-Report"
                    ])
                }
            }
        }
    }

    post {
        success {
            echo 'Tests executed successfully. Serenity report is available.'
        }
        failure {
            echo 'Tests failed. Please check the execution logs and generated report.'
        }
        always {
            echo 'Pipeline execution finished.'
        }
    }
}
