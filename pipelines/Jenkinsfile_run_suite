def waitForSeleniumGridUp(String url = "http://selenium-hub:4444/status", int maxRetries = 3, int waitSeconds = 5) {
    int attempt = 0
    while (attempt < maxRetries) {
        try {
            def response = httpRequest(
                url: url,
                httpMode: 'GET',
                validResponseCodes: '200'
            )
            echo "✅ Selenium Grid is up (HTTP ${response.status})"
            return true
        } catch (Exception e) {
            attempt++
            if (attempt >= maxRetries) {
                error "❌ Selenium Grid is not available after ${maxRetries} attempts."
            } else {
                echo "⏳ Selenium Grid not available. Retrying in ${waitSeconds} seconds... (Attempt ${attempt}/${maxRetries})"
                sleep(time: waitSeconds, unit: 'SECONDS')
            }
        }
    }
}
pipeline {
    agent any
    env{
        SELENIUM_GRID_HOST = "http://selenium-hub:4444/status"
    }
    parameters {
        choice(
            name: 'SUITE',
            choices: ['AddToCartRunner', 'LoginRunner', 'RegisterRunner', 'AllTestRunner'],
            description: 'Select the test suite to run'
        )
        choice(
            name: 'BROWSER',
            choices: ['Chrome', 'Edge', 'Firefox'],
            description: 'Select the browser for test execution'
        )
    }

    stages {

        stage('Run Serenity Tests in Docker') {
            steps {
                script {
                    def browser = params.BROWSER.toLowerCase()
                    def suite = params.SUITE
                    def gradleCommand = ''

                    echo "Running Serenity tests for suite: ${suite} on browser: ${params.BROWSER}"

                    if (suite == 'AllTestRunner') {
                        gradleCommand = 'gradle --tests "us.opencart.runners.*Runner" -Denvironment="remote' + params.BROWSER + ' --info"'
                    } else {
                        gradleCommand = 'gradle --tests "us.opencart.runners.' + suite + '" -Denvironment="remote' + params.BROWSER + ' --info"'
                    }

                    sh """
                        docker-compose -f docker-compose.selenium.yml up -d selenium-hub ${browser}-node
                    """
                    waitForSeleniumGridUp(SELENIUM_GRID_HOST, 3, 10)
                    sh """
                        ${gradleCommand}
                        gradle aggregate
                        docker-compose -f docker-compose.selenium.yml down
                    """
                }
            }
        }

        stage('Store Serenity Reports') {
            steps {
                script {
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: './target/site/serenity',
                        reportFiles: 'index.html',
                        reportName: "${params.PROJECT_NAME}-Serenity-Report"
                    ])
                }
            }
        }

    }

    post {
        success {
            echo 'Tests executed successfully. Serenity report is available.'
        }
        failure {
            echo 'Tests failed. Please check the execution logs and generated report.'
        }
        always {
            echo 'Pipeline execution finished.'
        }
    }
}
